INCQ_MDT = case_when(
HHINC_MDT < 30000 ~ 1,
HHINC_MDT < 60000 ~ 2,
HHINC_MDT < 100000 ~ 3,
TRUE ~ 4
)
) %>%
select(SERIALNO, ST_PUMA, WGTP, HHINC_PUMS, INCQ_PUMS, HHINC_MDT, INCQ_MDT)
View(pums_hh)
??median
library(spatstat)
install.packages(spatstat)
install.packages("spatstat")
spatstat::weighted.median(pums_hh$HHINC_MDT, pums_hh$WGTP)
filter(pums_hh, !(ST_PUMA %in% c('1702700', '1700104'))) %>%
spatstat::weighted.median(.$HHINC_MDT, .$WGTP)
filter(pums_hh, !(ST_PUMA %in% c('1702700', '1700104')))
pums_hh
pums_hh_2<-filter(pums_hh, !(ST_PUMA %in% c('1702700', '1700104')))
spatstat::weighted.median(pums_hh_2$HHINC_MDT, pums_hh_2$WGTP)
median(pums_hh_2$HHINC_MDT)
library(devtools)
check()
load_all()
?geom_text_lastonly
ggplot(df, aes(x=year, y=value, color=var, label=scales::label_percent(accuracy = 0.1)(value))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5))
df <- data.frame(year=2010:2020, value=runif(22), var=c(rep("A", 11), rep("B", 11)))
ggplot(df, aes(x=year, y=value, color=var, label=scales::label_percent(accuracy = 0.1)(value))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5))
ggplot(df, aes(x=year, y=value, color=var, label=scales::label_percent(accuracy = 0.1)(var))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5))
ggplot(df, aes(x=year, y=value, color=var, label=scales::label_percent(accuracy = 0.1)(value))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5))
ggplot(df, aes(x=year, y=value, color=var, label=scales::label_percent(accuracy = 0.1)) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5))
)
ggplot(df, aes(x=year, y=value, color=var, label=scales::label_percent(accuracy = 0.1)) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5))
)
ggplot(df, aes(x=year, y=value, color=var, label=scales::label_percent(accuracy = 0.1))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5))
ggplot(df, aes(x=year, y=value, color=var, label=sprintf("%.1f%%", 100*value))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5))
ggplot(df, aes(x=year, y=value, color=var, label=scales::label_percent(value, accuracy = 0.1))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5))
?scales::label_percent
check()
?geom_text_lastonly
load_all()
HH_MEAN_SIZE_7P <- 7.7516794
OUT_MEAN_7P_SIZE_TXT <- paste0(DIR, "/outputs/mean_7p_hh_size.txt")
DIR <- "~/Documents/OneDrive - Chicago Metropolitan Agency for Planning/Documents/Socec2020_Update"
OUT_MEAN_7P_SIZE_TXT <- paste0(DIR, "/outputs/mean_7p_hh_size.txt")
cat(HH_)
sink(OUT_MEAN_7P_SIZE_TXT)
cat(HH_MEAN_SIZE_7P)
sink()
cat(HH_MEAN_SIZE_7P)
ggplot(df, aes(x=year, y=value, color=var)) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing") +
scale_x_continuous("Year") +
geom_text_lastonly()
ggplot(df, aes(x=year, y=value, color=var)) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing") +
scale_x_continuous("Year") +
geom_text_lastonly() + theme_cmap()
ggplot(df, aes(x=year, y=value, color=var)) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing") +
scale_x_continuous("Year") +
geom_text_lastonly() + theme_cmap() + coord_flip()
ggplot(df, aes(x=year, y=value, color=var, label=sprintf("%.1f%%", 100*value))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5)) +
theme_cmap()
ggplot(df, aes(x=year, y=value, color=var, label=sprintf("%.1f%%", 100*value))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5)) +
theme_cmap()
ggplot(df, aes(x=year, y=value, color=var, label=sprintf("%.1f%%", 100*value))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5)) +
theme_cmap() + coord_flip()
ggplot(df, aes(x=year, y=value, color=var, label=sprintf("%.1f%%", 100*value))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5))
theme_cmap()
ggplot(df, aes(x=year, y=value, color=var, label=sprintf("%.1f%%", 100*value))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5)) +
theme_cmap()
ggplot(df, aes(x=year, y=value, color=var, label=sprintf("%.1f%%", 100*value))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5)) +
coord_flip() + theme_cmap()
ggplot(df, aes(x=year, y=value, color=var, label=sprintf("%.1f%%", 100*value))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5)) +
theme_cmap() + coord_slip()
ggplot(df, aes(x=year, y=value, color=var, label=sprintf("%.1f%%", 100*value))) +
geom_line() +
labs(title="Random lines") +
scale_y_continuous("Percentage of absolutely nothing", labels=scales::percent) +
scale_x_continuous("Year", expand=expansion(mult=c(0.05, 0.10))) +
geom_text_lastonly(add_points=TRUE, text_aes=list(fontface="bold"), point_aes=list(size=2.5)) +
theme_cmap() + coord_flip()
?coord_flip
last_plot()
"v" %in% NA
?grepl
grep("v", "vh")
grepl("v", "vh")
grepl("v", NA)
grepl("h", "vh")
load_all()
check()
?match.arg
match.arg("x", c("h","v","vh",NA))
match.arg(NA, c("h","v","vh",NA))
match.arg(NULL, c("h","v","vh",NULL))
match.arg("", c("h","v","vh",""))
match.arg("h", c("h","v","vh",""))
load_all()
check()
load_all()
check()
load_all()
?theme_cmap
?theme
load_all()
check()
load_all()
check()
?theme_cmap
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line() +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
theme_cmap(hline = 0, ylab = "Percent change")
load_all()
check()
?theme_cmap
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line() +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
theme_cmap(hline = 0, ylab = "Percent change")
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line() +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
theme_cmap(hline = 0, ylab = "Percent change", gridlines="v")
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line() +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
theme_cmap(hline = 0, ylab = "Percent change", gridlines="hv")
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line() +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
theme_cmap(hline = 0, ylab = "Percent change", gridlines="vh")
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line() +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
theme_cmap(hline = 0, ylab = "Percent change", gridlines="none")
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line() +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
theme_cmap(hline = 0, ylab = "Percent change", gridlines="hv")
?cmapplot
line_size_conversion(3, "pt")
?geom_line
??lwd
load_all()
check()
load_all()
check()
load_all()
check()
?theme_cmap
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line() +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
theme_cmap(hline = 0, ylab = "Percent change")
testplot <- ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line() +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
theme_cmap(hline = 0, ylab = "Percent change")
finalize_plot(testplot)
testplot <- ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line(size=10) +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
theme_cmap(hline = 0, ylab = "Percent change")
testplot <- ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line(size=100) +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
theme_cmap(hline = 0, ylab = "Percent change")
?geom_line
testplot <- ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line(lwd=10) +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
theme_cmap(hline = 0, ylab = "Percent change")
testplot <- ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
geom_line(lwd=10) +
scale_x_continuous(breaks = scales::breaks_pretty(11)) +
()
testplot <- ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
theme_cmap(hline = 0, ylab = "Percent change") +
geom_line(lwd=10) +
scale_x_continuous(breaks = scales::breaks_pretty(11))
testplot <- ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
theme_cmap(hline = 0, ylab = "Percent change") +
geom_line(lwd=10) +
scale_x_continuous(breaks = scales::breaks_pretty(11))
testplot <- ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
theme_cmap(hline = 0, ylab = "Percent change") +
geom_line(size=10) +
scale_x_continuous(breaks = scales::breaks_pretty(11))
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
theme_cmap(hline = 0, ylab = "Percent change") +
geom_line(size=10) +
scale_x_continuous(breaks = scales::breaks_pretty(11))
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
theme_cmap(hline = 0, ylab = "Percent change") +
geom_line(size=line_size_conversion(0.25, "in") +
scale_x_continuous(breaks = scales::breaks_pretty(11))
()
)
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
theme_cmap(hline = 0, ylab = "Percent change") +
geom_line(size=line_size_conversion(0.25, "in")) +
scale_x_continuous(breaks = scales::breaks_pretty(11))
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
theme_cmap(hline = 0, ylab = "Percent change") +
geom_line(size=line_size_conversion(0.125, "in")) +
scale_x_continuous(breaks = scales::breaks_pretty(11))
?warn
?warning
line_size_conversion(10, "xxx")
(1 + 2)
(1+2
+3
+4)
line_size_conversion <- function(
value,
type = c("pt", "mm", "in")
) {
#if (type == "pt" | type == "mm" | type == "in") {
type <- match.arg(type)
value_in_pt <- grid::convertUnit(unit(value,type), # Take inputs
"points", # convert to points
valueOnly = TRUE) # Drop units
return(
value_in_pt / 72  # Normalize from points
* 96            # Multiply by units for R pixels (per inch)
/ ggplot2::.pt  # Account for ggplot's multiplication of size by .pt,
#  which is defined as 72.27/25.4
)
#} else {
#  warning("Invalid value type")
#}
}
line_size_conversion(1, "pt")
line_size_conversion(1, "xx")
line_size_conversion(1, "in")
line_size_conversion(1, "mm")
cmapplot_globals$lwd_origin
line_size_conversion(1.6, "pt")
line_size_conversion(1.6, "pts")
?unit
?match.arg
unit(1.6, "pt")
convertUnit(unit(1.6, "pt"),"points",valueOnly=T)
convertUnit(unit(1, "in"),"points",valueOnly=T)
convertUnit(unit(1, "xxx"),"points",valueOnly=T)
line_size_conversion <- function(
value,
type #= c("pt", "mm", "in")
) {
#if (type == "pt" | type == "mm" | type == "in") {
#type <- match.arg(type)
value_in_pt <- grid::convertUnit(grid::unit(value, type), # Take inputs
"points", # convert to points
valueOnly = TRUE) # Drop units
return(
value_in_pt / 72  # Normalize from points
* 96            # Multiply by units for R pixels (per inch)
/ ggplot2::.pt  # Account for ggplot's multiplication of size by .pt,
#  which is defined as 72.27/25.4
)
#} else {
#  warning("Invalid value type")
#}
}
line_size_conversion(1.6, "pts")
line_size_conversion <- function(value, type) {
value_in_pt <- grid::convertUnit(grid::unit(value, type), # Take inputs
"points", # convert to points
valueOnly = TRUE) # Drop units
#return(
value_in_pt / 72  # Normalize from points
* 96            # Multiply by units for R pixels (per inch)
/ ggplot2::.pt  # Account for ggplot's multiplication of size by .pt,
#  which is defined as 72.27/25.4
#)
}
line_size_conversion <- function(value, type) {
value_in_pt <- grid::convertUnit(grid::unit(value, type), # Take inputs
"points", # convert to points
valueOnly = TRUE) # Drop units
return(
value_in_pt / 72  # Normalize from points
* 96            # Multiply by units for R pixels (per inch)
/ ggplot2::.pt  # Account for ggplot's multiplication of size by .pt,
#  which is defined as 72.27/25.4
)
}
line_size_conversion(1.6, "pts")
line_size_conversion(1.6, "points")
line_size_conversion(1.6, "pt")
?line_size_conversion
ggplot_size_conversion <- function(value, type) {
value_in_pt <- grid::convertUnit(grid::unit(value, type), # Take inputs
"points", # convert to points
valueOnly = TRUE) # Drop units
return(
value_in_pt / 72  # Normalize from points
* 96            # Multiply by units for R pixels (per inch)
/ ggplot2::.pt  # Account for the ggplot2::.pt factor (=72.27/25.4)
)
}
ggplot_size_conversion(1, "inches")
ggplot_size_conversion(1, "in")
ggplot_size_conversion(1, "pt")
0.4686131 *72
0.4686131 *72.27
cmapplot_globals
colors = list(black="#222222")
colors$black
load_all()
rm(list = c("colors", "ggplot_size_conversion"))
load_all()
check()
?theme_cmap
cmapplot_globals$lwd_other
ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
theme_cmap(hline = 0, ylab = "Percent change") +
geom_line() +
scale_x_continuous(breaks = scales::breaks_pretty(11))
grid::convertUnit()
?grid::convertUnit
load_all()
check()
ggplot_size_conversion(0.8, "pt")
#devtools::install_github("FantasyFootballAnalytics/ffanalytics")
library(tidyverse)
library(ffanalytics)
SEASON <- 2020
WEEK <- 2
IGNORE_TEAMS <- c('CLE', 'CIN', 'FA')  # Thursday teams, plus free agents
# Use FanDuel scoring
scoring$rec$rec <- 0.5  # 1/2 point per reception
scoring$pass$pass_int <- -1  # -1 for throwing an interception
scoring$misc$fumbles_lost <- -2  # -2 for losing a fumble
scoring$pts_bracket <- list(  # DST points allowed
list(threshold = 0, points = 10),
list(threshold = 6, points = 7),
list(threshold = 13, points = 4),
list(threshold = 20, points = 1),
list(threshold = 27, points = 0),
list(threshold = 34, points = -1),
list(threshold = 99, points = -4)
)
POS <- c("QB", "RB", "WR", "TE", "DST")
scrape <- scrape_data(pos=POS, season=SEASON, week=WEEK)
get_salary_table <- function(scrape_pos) {
scrape_pos %>% filter(data_src=="NumberFire") %>%
rowwise() %>%
mutate(salary=as.numeric(str_remove(fanduel_cost, "\\$")),
value=as.numeric(fanduel_value)) %>%
select(id, salary, value) %>%
filter(!is.na(id), !is.na(salary))
}
salaries <- get_salary_table(scrape$QB) %>%
bind_rows(get_salary_table(scrape$RB)) %>%
bind_rows(get_salary_table(scrape$WR)) %>%
bind_rows(get_salary_table(scrape$TE)) %>%
bind_rows(get_salary_table(scrape$DST))
proj_scores <- projections_table(scrape) %>%
filter(avg_type == "robust") %>%
left_join(salaries, by="id") %>%
add_player_info() %>%
filter(!(is.na(salary) | (team %in% IGNORE_TEAMS) | pos != position))
ggplot(proj_scores) +
geom_point(aes(x=salary, y=points, color=position))
optimize_lineup <- function(df) {
obj <- df$points
mat <- rbind(
as.integer(df$position == 'QB'),
as.integer(df$position == 'RB'),
as.integer(df$position == 'WR'),
as.integer(df$position == 'TE'),
as.integer(df$position == 'DST'),
as.integer(df$position %in% c('RB', 'WR', 'TE')),  # Flex-eligible
rep(as.integer(1), nrow(df)),
as.integer(df$salary)
)
dir <- c('==', '>=', '>=', '>=', '==', '==', '==', '<=')
rhs <- c( 1,    2,    3,    1,    1,    7,    9,    60000)
result <- Rglpk::Rglpk_solve_LP(
obj, mat, dir, rhs, types=rep('B', 8), max=TRUE, tm_limit=100000, verbose=TRUE,
bounds=list(lower=list(ind=1:7, val=rep(0, 7)),
upper=list(ind=1:7, val=rep(1, 7)))
)
lineup <- df[result$solution == 1, ]
return(lineup)
}
proj_scores %>%
select(id, first_name, last_name, team, position, salary, points, value) %>%
#filter(!(id %in% c("14079"))) %>%  # Specify any players to omit
#filter(!(position=="DST" & team!="IND")) %>%  # Lock in a specific defense
optimize_lineup() %>%
arrange(position) #%>%
summarize_at(c("salary", "points"), sum)
proj_scores %>%
select(id, first_name, last_name, team, position, salary, points, value) %>%
#filter(!(id %in% c("14079"))) %>%  # Specify any players to omit
#filter(!(position=="DST" & team!="IND")) %>%  # Lock in a specific defense
optimize_lineup() %>%
arrange(position) %>%
summarize_at(c("salary", "points"), sum)
load_all()
library(devtools)
check()
library(devtools)
load_all()
check()
library(devtools)
load_all()
library(devtools)
load_all()
install.packages("pkgdown")
install.packages("usethis")
library(devtools)
load_all()
?usethis::use_github_action
usethis::use_github_action("pkgdown")
?pkgdown
library(pkgdown)
??pkgdown
pkgdown::deploy_to_branch(new_process = FALSE)
?person
load_all()

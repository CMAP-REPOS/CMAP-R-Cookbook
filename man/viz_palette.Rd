% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colors_continuous.R, R/colors_discrete.R,
%   R/utilities.R
\name{viz_palette}
\alias{viz_gradient}
\alias{viz_palette}
\alias{cmap_palettes}
\alias{cmap_gradients}
\alias{cmap_colors}
\alias{fetch_pal}
\title{Visualizing CMAP color palettes}
\usage{
viz_gradient(pal, ttl = NULL)

viz_palette(pal, ttl = NULL, num = NULL)

fetch_pal(
  pal,
  which = c("discrete", "sequential", "divergent"),
  return = c("colors", "type", "exists")
)
}
\arguments{
\item{pal}{character, name of a a cmapplot palette, or a vector of colors
representing a palette}

\item{ttl}{character, title to be displayed (the name of the palette)}

\item{num}{numeric, the number of colors to display}

\item{which}{a vector of palette types to consider}

\item{return}{Value to return. "colors", the default, returns the palette as
a vector of colors. "type" returns the palette's type. "Exists" returns
TRUE or FALSE based on whether the name is found in the palettes table.}
}
\description{
The cmapplot package contains a many color palettes extracted from the
larger, official CMAP color palette. Helper functions allow the user to
inspect the various palettes before applying them to plots.
}
\details{
Palettes are stored in a tibble the \code{cmapplot_globals} environment. The
user can access this tibble with \code{\link{get_cmapplot_global}}, but it is
easier to access information about a single palette with \code{fetch_pal}.

\code{viz_palette} and \code{viz_gradient} draw the palette to the plots
window. These functions are modified with respect from the
\href{https://github.com/ropenscilabs/ochRe}{ochRe package}.

For more information about available cmapplot color palettes and how to apply
them, see \code{vignette("colors")}.
}
\section{Functions}{
\itemize{
\item \code{viz_gradient}: Interpolates the range of colors a sequential or
divergent palette offers when used on a continuous scale.

\item \code{viz_palette}: Displays the colors of any cmapplot palette

\item \code{fetch_pal}: Returns details about a palette
}}

\examples{
# Vizualize a sequential or divergent palette with interpolation
viz_gradient("green_teal_blue")

# Visualize a single palette as individual colors
viz_palette("legislation")

# Print names and types of all available palettes
as.data.frame(get_cmapplot_global("palettes")[1:2])

# Identify the first two colors of the Prosperity Palette
fetch_pal("prosperity")[1:2]

# Confirm that "reds" is a sequential palette
fetch_pal("reds", which = "sequential", return = "exists")

}

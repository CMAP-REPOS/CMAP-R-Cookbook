% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/theme_cmap.R
\name{theme_cmap}
\alias{theme_cmap}
\title{Add CMAP theme to ggplot chart}
\usage{
theme_cmap(
  xlab = NULL,
  ylab = NULL,
  hline = NULL,
  vline = NULL,
  gridlines = c("h", "v", "hv", "none"),
  legend.max.columns = NULL,
  overrides = list(),
  ...
)
}
\arguments{
\item{xlab, ylab}{Char, the string used to label the x and y axes,
respectively. If unspecified, the axis label will be left off the graph.}

\item{hline, vline}{Numeric, the location of a strong horizontal or vertical
line to be added to the plot. Use \code{hline = 0}, for example, to place a
line at y = 0 to differentiate between positive and negative values.}

\item{gridlines}{Char, the grid lines to be displayed on the chart. If left as
default, horizontal grid lines will be displayed while vertical grid lines
will be masked. Acceptable values are "h" (horizontal only), "v" (vertical
only), "hv" (both horizontal and vertical), and "none" (neither).}

\item{legend.max.columns}{Integer, the maximum number of columns in the
legend. If no value is set, the chart will rely on `ggplot`'s default and
automatic column handling behavior, which should work for most cases. Manual
adjustment may be required if legend entries are particularly numerous
and/or lengthy. Note that `ggplot` will still auto-adjust in ways that may
mean the total number of columns is less than the maximum (e.g., if there
are five items in a legend with four columns as the maximum, the output will
be one row of three and another row of two).}

\item{overrides}{Named list, overrides the default drawing attributes defined
in \code{cmapplot_globals$consts} which are drawn by
\code{theme_cmap()} (only a few of them). Units are in bigpts (1/72 of an
inch).}

\item{...}{pass additional arguments to \code{ggplot2::theme()} to override
any elements of the default CMAP theme.}
}
\description{
\code{theme_cmap} returns one or more ggplot objects that together construct a
plot area in accordance with CMAP design standards.
}
\section{Overrides}{
 In the \code{overrides} argument, the user can modify
 the default constants that define certain plot aesthetics. Units of all
 plot constants are "bigpts": 1/72 of an inch. Most plot constants (stored in
 \code{cmapplot_globals$consts}) are used in \code{finalize_plot()},
 but a few are used in this function. Overrides with astirisks are not
 "sticky" -- they will need to be re-specified in \code{finalize_plot}.

 \itemize{
   \item \code{lwd_originline}: the width of any origin lines drawn by
   \code{hline} or \code{vline}.
   \item \code{lwd_gridline}: the width of gridlines in the plot, if drawn by
   \code{gridlines}.
   \item \code{margin_legend_i}*: The margin between legends (this only
   applies in plots with two or more legends and does not affect legend
   spacing on plots with single legends that have multiple rows).
   \item \code{margin_legend_b}*: The margin between the bottom of the legend
   and the rest of the plot.
   \item \code{legend_key_size}*: The size of legend key elements.
   \item \code{padding_plot}*: A numeric vector of length 4 (top, right,
   bottom, left) that creates padding between the plot and its drawing
   extent.
   \item \code{padding_legend}*: A numeric vector of length 4 (top, right,
   bottom, left) that creates padding around the margin. These numbers can be
   negative to reduce space around the legend.
 }
}

\examples{

\dontrun{

# The only way to place the origin line (`hline`, `vline`) behind any data geoms
# is to or place `theme_cmap()` before the geoms:
 ggplot(grp_over_time, aes(x = year, y = realgrp, color = cluster)) +
   theme_cmap(hline = 0, ylab = "Percent change") +
   geom_line() +
   scale_x_continuous(breaks = scales::breaks_pretty(11))


 df <- dplyr::filter(traded_emp_by_race, variable \%in\% c("SpecializedTraded",
   "UnspecializedTraded"))

 ggplot(df, aes(x = reorder(Race, -value), y = value, fill = variable)) +
   geom_col(position = position_stack(reverse = TRUE)) +
   scale_y_continuous(labels = scales::percent) +
   theme_cmap(hline = 0, ylab = "This is the y axis")

 ggplot(df, aes(x = reorder(Race, -value), y = value, fill = variable)) +
   geom_col(position = position_stack(reverse = TRUE)) +
   coord_flip() +
   scale_y_continuous(labels = scales::percent) +
   theme_cmap(hline = 0, gridlines = "v")
}
}
